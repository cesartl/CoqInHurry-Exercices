Require Import Arith.
Require Import Nat.
Require Import List.

Fixpoint evenb n :=
  match n with
    0 => true
   |1 => false
   |S(S p) => evenb p
   end.

Fixpoint add n m := match n with
 0 => m
|S p => add p (S m)
end.

Lemma add_one : forall n m, add n (S m) = S (add n m).
  induction n as [|p IH].
    - intros.
      simpl.
      reflexivity.
    - intros.
      simpl.
      apply IH.
Qed.

Lemma add_one_b : forall n m, add (S n) m = S (add n m).
  induction n.
  - intros.
    simpl.
    reflexivity.
  - intros.
    simpl.
    apply IHn.
      
Qed.

Fixpoint sum_odd_n (n:nat) : nat := match n with 
  | 0 => 0
  | S p => 1+2*p+sum_odd_n p 
end.


Lemma p1 : forall n: nat, n + n * n = (S n) * n.
  reflexivity.
Qed.

Lemma sum_odd_squared : forall n:nat, sum_odd_n n = n * n.
  intros n.
  induction n.
  - reflexivity.
  - simpl.
    rewrite IHn.
    rewrite <- plus_n_O.
    remember (n * n) as squa_x eqn:H.
    Search (_ * _ = _ * _).
    rewrite Nat.mul_comm.
    rewrite H.
    simpl.
    rewrite plus_assoc.
    reflexivity.
Qed.

Fixpoint count n l := match l with
| nil => 0 
| a::tl => let r := count n tl in if beq_nat n a then 1+r else r end.

Fixpoint length {a: Type} (l : list a) : nat := match l with
 | nil => 0
 | h::t => S(length t)
end.

Lemma length_plus_one : forall (a : Type) (l : list a) (e : a), length (e::l) = S (length l).
  reflexivity.
Qed.